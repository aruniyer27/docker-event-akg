--- 
defaults: 
  docker: 
    - 
      image: "circleci/python:3.7.2"
  working_directory: ~/project
fetch_data: 
  run: 
    command: |
        source venv/bin/activate
        chmod +x ./scripts/fetch_kaggle_dataset.sh
        ./scripts/fetch_kaggle_dataset.sh
    name: "Set script permissions and fetch data"
jobs: 
  deploy_to_heroku: 
    docker: 
      - 
        image: "circleci/python:3.7.2"
    steps: 
      - checkout
      - 
        run: 
          command: "git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master\n"
          name: "Deploy to Heroku"
    working_directory: ~/project
  differential_tests: 
    docker: 
      - 
        image: "circleci/python:3.7.6"
    steps: 
      - 
        checkout: 
          path: ~/project
      - 
        run: 
          command: |
              sudo pip install --upgrade pip
              pip install --user tox
              tox -e py37
          name: "Runnning differential tests"
    working_directory: ~/project/packages/regression_model
  publish_docker_image_to_artifactory: 
    docker: 
      - 
        image: "circleci/python:3.7.2"
    steps: 
      - checkout
      - 
        setup_remote_docker: ~
      - 
        run: "docker login arunkg27.jfrog.io/artifactory/docker-akg/ -u \"arunkg\" -p $JPD_PASSWD"
      - 
        run: 
          command: "wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh\n"
          name: "Setup Heroku CLI"
      - 
        run: 
          command: "make build-ml-api-heroku push-ml-api-heroku\n"
          name: "Build and Push Image"
      - 
        run: 
          command: "#heroku container:release web --app $HEROKU_APP_NAME\n"
          name: "Release to Heroku"
    working_directory: ~/project
  publish_docker_image_to_artifactory1: 
    docker: 
      - 
        image: "circleci/python:3.7.2"
    steps: 
      - checkout
      - 
        run: "docker login arunkg27.jfrog.io/artifactory/docker-akg/ -u \"arunkg\" -p $JPD_PASSWD"
      - 
        run: 
          command: |
              curl -fL https://getcli.jfrog.io | sh
              #eval $(aws ecr get-login --no-include-email --region us-east-1)
              make build-ml-api-aws tag-ml-api push-ml-api-aws
              #aws ecs update-service --cluster ml-api-cluster --service custom-service --task-definition  first-run-task-definition --force-new-deployment
          name: "Publishing docker image to Artifactory"
    working_directory: ~/project/packages/ml_models
  test_ml_api: 
    docker: 
      - 
        image: "circleci/python:3.6.9"
    steps: 
      - 
        checkout: 
          path: ~/project
      - 
        run: 
          command: |
              sudo pip install --upgrade pip
              pip install --user tox
              tox -e py36
          name: "Run ML API TEST"
    working_directory: ~/project/packages/regression_model
  test_regression_model: 
    docker: 
      - 
        image: "circleci/python:3.8.0"
    steps: 
      - 
        checkout: 
          path: ~/project
      - 
        run: 
          command: |
              sudo pip install --upgrade pip
              pip install --user tox
              tox -e py38
          name: "Run tests with Python 3.8"
    working_directory: ~/project/packages/regression_model
  train_and_upload_regression_model: 
    docker: 
      - 
        image: "circleci/python:3.7.2"
    steps: 
      - checkout
      - 
        run: 
          command: |
              python3 -m venv venv
              source venv/bin/activate
              pip install --upgrade pip
          name: "Create venv"
      - 
        run: 
          command: |
              . venv/bin/activate
              pip install -r packages/regression_model/requirements.txt
          name: "Install requirements"
      - 
        run: 
          command: |
              source venv/bin/activate
              chmod +x ./scripts/fetch_kaggle_dataset.sh
              ./scripts/fetch_kaggle_dataset.sh
          name: "Set script permissions and fetch data"
      - 
        run: 
          command: |
              . venv/bin/activate
              PYTHONPATH=./packages/regression_model python3 packages/regression_model/regression_model/train_pipeline.py
          name: "Train model"
      - 
        run: 
          command: |
              . venv/bin/activate
              chmod +x ./scripts/publish_model.sh
              ./scripts/publish_model.sh ./packages/regression_model/
          name: "Publish model to Artifactory"
    working_directory: ~/project
prepare_tox: 
  run: 
    command: |
        sudo pip install --upgrade pip
        pip install --user tox
    name: "Install tox"
prepare_venv: 
  run: 
    command: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    name: "Create venv"
version: 2
workflows: 
  test-all: 
    jobs: 
      - test_regression_model
      - differential_tests
      - test_ml_api
      - 
        train_and_upload_regression_model: 
          filters: 
            branches: 
              only: 
                - main
          requires: 
            - test_regression_model
            - test_ml_api
            - differential_tests
      - 
        publish_docker_image_to_artifactory: 
          filters: 
            branches: 
              only: 
                - main
          requires: 
            - train_and_upload_regression_model
  version: 2
